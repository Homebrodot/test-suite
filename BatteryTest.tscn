[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "BatteryTest"
script/source = "extends VBoxContainer
class_name BatteryTest

export(int, 1, 60) var _timer_const = 5
var _battery_percent = 0
var _power_state = OS.POWERSTATE_UNKNOWN
var _battery_seconds = 0
var _time_elapsed = 0

onready var battery_percent_label = $VBox/BatPerHBox/Amount
onready var power_state_label = $VBox/PowStateHBox/Amount
onready var battery_seconds_label = $VBox/BatSecHBox/Amount
onready var quit_btn = $VBox/QuitBtn
onready var timer = $Timer

# Called when the node enters the scene tree for the first time.
func _ready():
	# grab focus on quit button, so can close program easily via controller, not just touch/mouse
	quit_btn.grab_focus()
	
	# in addition to showing in the GUI, also log to stdout every 5s
	timer.set_wait_time(_timer_const)
	timer.start()

func _parse_state(ps: int) -> String:
	match ps:
		OS.POWERSTATE_ON_BATTERY: return \"Discharging\"
		OS.POWERSTATE_NO_BATTERY: return \"No Battery\"
		OS.POWERSTATE_CHARGING: return \"Charging\"
		OS.POWERSTATE_CHARGED: return \"Fully Charged\"
		_: return \"Unknown\"

func _update_values() -> void:
	_battery_percent = OS.get_power_percent_left()
	_power_state = _parse_state(OS.get_power_state())
	_battery_seconds = OS.get_power_seconds_left()

func _update_labels() -> void:
	if (_battery_percent == -1): battery_percent_label.text = \"NOT AVAILABLE\"
	else: battery_seconds_label.text = str(_battery_seconds)

	power_state_label.text = _power_state

	if (_battery_seconds == -1): battery_seconds_label.text = \"NOT AVAILABLE\"
	else: battery_seconds_label.text = str(_battery_seconds)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta) -> void:
	_update_values()
	_update_labels()

func _on_QuitBtn_pressed():
	get_tree().quit()

# log to stdout the power vars
func _on_Timer_timeout():
	_time_elapsed += _timer_const
	print(\"\\nTime Elapsed: \" + str(_time_elapsed) + \"s\")
	print(\"Battery Percentage: \" + str(_battery_percent))
	print(\"Power State: \" + _power_state)
	print(\"Battery Seconds: \" + str(_battery_seconds))
	#timer.start()
"

[node name="Control" type="VBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
alignment = 1
script = SubResource( 1 )

[node name="Title" type="Label" parent="."]
margin_top = 297.0
margin_right = 1280.0
margin_bottom = 311.0
text = "Homebrodot - Battery / Power Test"
align = 1

[node name="Container" type="Panel" parent="."]
margin_left = 640.0
margin_top = 315.0
margin_right = 640.0
margin_bottom = 345.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 4
size_flags_vertical = 4

[node name="VBox" type="VBoxContainer" parent="."]
margin_top = 349.0
margin_right = 1280.0
margin_bottom = 423.0
alignment = 1

[node name="BatPerHBox" type="HBoxContainer" parent="VBox"]
margin_right = 1280.0
margin_bottom = 14.0
alignment = 1

[node name="Label" type="Label" parent="VBox/BatPerHBox"]
margin_left = 529.0
margin_right = 654.0
margin_bottom = 14.0
text = "Battery Percentage:"

[node name="Amount" type="Label" parent="VBox/BatPerHBox"]
margin_left = 658.0
margin_right = 750.0
margin_bottom = 14.0
text = "PLACEHOLDER"

[node name="PowStateHBox" type="HBoxContainer" parent="VBox"]
margin_top = 18.0
margin_right = 1280.0
margin_bottom = 32.0
alignment = 1

[node name="Label" type="Label" parent="VBox/PowStateHBox"]
margin_left = 552.0
margin_right = 631.0
margin_bottom = 14.0
text = "Power State:"

[node name="Amount" type="Label" parent="VBox/PowStateHBox"]
margin_left = 635.0
margin_right = 727.0
margin_bottom = 14.0
text = "PLACEHOLDER"

[node name="BatSecHBox" type="HBoxContainer" parent="VBox"]
margin_top = 36.0
margin_right = 1280.0
margin_bottom = 50.0
alignment = 1

[node name="Label" type="Label" parent="VBox/BatSecHBox"]
margin_left = 551.0
margin_right = 633.0
margin_bottom = 14.0
text = "Seconds left:"

[node name="Amount" type="Label" parent="VBox/BatSecHBox"]
margin_left = 637.0
margin_right = 729.0
margin_bottom = 14.0
text = "PLACEHOLDER"

[node name="QuitBtn" type="Button" parent="VBox"]
margin_top = 54.0
margin_right = 1280.0
margin_bottom = 74.0
grow_horizontal = 2
grow_vertical = 2
text = "Quit"

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0

[connection signal="pressed" from="VBox/QuitBtn" to="." method="_on_QuitBtn_pressed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
